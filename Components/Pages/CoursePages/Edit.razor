@page "/courses/edit"
@using Microsoft.EntityFrameworkCore
@using FSDProject.Domain
@inject IDbContextFactory<FSDProject.Data.FSDProjectContext> DbFactory
@inject NavigationManager NavigationManager

<PageTitle>Edit</PageTitle>

<h1>Edit</h1>

<h2>Course</h2>
<hr />
@if (Course is null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="row">
        <div class="col-md-4">
            <EditForm method="post" Model="Course" OnValidSubmit="UpdateCourse" FormName="edit" Enhance>
                <DataAnnotationsValidator />
                <ValidationSummary role="alert"/>
                <input type="hidden" name="Course.CourseId" value="@Course.CourseId" />
                <div class="mb-3">
                    <label for="coursename" class="form-label">CourseName:</label>
                    <InputText id="coursename" @bind-Value="Course.CourseName" class="form-control" />
                    <ValidationMessage For="() => Course.CourseName" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="courseprice" class="form-label">CoursePrice:</label>
                    <InputNumber id="courseprice" @bind-Value="Course.CoursePrice" class="form-control" />
                    <ValidationMessage For="() => Course.CoursePrice" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="courseduration" class="form-label">CourseDuration:</label>
                    <InputText id="courseduration" @bind-Value="Course.CourseDuration" class="form-control" />
                    <ValidationMessage For="() => Course.CourseDuration" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="completionpercentage" class="form-label">CompletionPercentage:</label>
                    <InputNumber id="completionpercentage" @bind-Value="Course.CompletionPercentage" class="form-control" />
                    <ValidationMessage For="() => Course.CompletionPercentage" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="useraccid" class="form-label">UserAccId:</label>
                    <InputNumber id="useraccid" @bind-Value="Course.UserAccId" class="form-control" />
                    <ValidationMessage For="() => Course.UserAccId" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="coursedatabaseid" class="form-label">CourseDatabaseId:</label>
                    <InputNumber id="coursedatabaseid" @bind-Value="Course.CourseDatabaseId" class="form-control" />
                    <ValidationMessage For="() => Course.CourseDatabaseId" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="scoreid" class="form-label">ScoreId:</label>
                    <InputNumber id="scoreid" @bind-Value="Course.ScoreId" class="form-control" />
                    <ValidationMessage For="() => Course.ScoreId" class="text-danger" />
                </div>
                <button type="submit" class="btn btn-primary">Save</button>
            </EditForm>
        </div>
    </div>
}

<div>
    <a href="/courses">Back to List</a>
</div>

@code {
    [SupplyParameterFromQuery]
    private int CourseId { get; set; }

    [SupplyParameterFromForm]
    private Course? Course { get; set; }

    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();
        Course ??= await context.Course.FirstOrDefaultAsync(m => m.CourseId == CourseId);

        if (Course is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }

    // To protect from overposting attacks, enable the specific properties you want to bind to.
    // For more information, see https://learn.microsoft.com/aspnet/core/blazor/forms/#mitigate-overposting-attacks.
    private async Task UpdateCourse()
    {
        using var context = DbFactory.CreateDbContext();
        context.Attach(Course!).State = EntityState.Modified;

        try
        {
            await context.SaveChangesAsync();
        }
        catch (DbUpdateConcurrencyException)
        {
            if (!CourseExists(Course!.CourseId))
            {
                NavigationManager.NavigateTo("notfound");
            }
            else
            {
                throw;
            }
        }

        NavigationManager.NavigateTo("/courses");
    }

    private bool CourseExists(int courseid)
    {
        using var context = DbFactory.CreateDbContext();
        return context.Course.Any(e => e.CourseId == courseid);
    }
}
