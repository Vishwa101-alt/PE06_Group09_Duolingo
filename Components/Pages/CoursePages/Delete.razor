@page "/courses/delete"
@using Microsoft.EntityFrameworkCore
@using FSDProject.Domain
@inject IDbContextFactory<FSDProject.Data.FSDProjectContext> DbFactory
@inject NavigationManager NavigationManager

<PageTitle>Delete</PageTitle>

<h1>Delete</h1>

<p>Are you sure you want to delete this?</p>
<div>
    <h2>Course</h2>
    <hr />
    @if (course is null)
    {
        <p><em>Loading...</em></p>
    }
    else {
        <dl class="row">
            <dt class="col-sm-2">CourseName</dt>
            <dd class="col-sm-10">@course.CourseName</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">CoursePrice</dt>
            <dd class="col-sm-10">@course.CoursePrice</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">CourseDuration</dt>
            <dd class="col-sm-10">@course.CourseDuration</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">CompletionPercentage</dt>
            <dd class="col-sm-10">@course.CompletionPercentage</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">UserAccId</dt>
            <dd class="col-sm-10">@course.UserAccId</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">CourseDatabaseId</dt>
            <dd class="col-sm-10">@course.CourseDatabaseId</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">ScoreId</dt>
            <dd class="col-sm-10">@course.ScoreId</dd>
        </dl>
        <EditForm method="post" Model="course" OnValidSubmit="DeleteCourse" FormName="delete" Enhance>
            <button type="submit" class="btn btn-danger" disabled="@(course is null)">Delete</button> |
            <a href="/courses">Back to List</a>
        </EditForm>
    }
</div>

@code {
    private Course? course;

    [SupplyParameterFromQuery]
    private int CourseId { get; set; }

    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();
        course = await context.Course.FirstOrDefaultAsync(m => m.CourseId == CourseId);

        if (course is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }

    private async Task DeleteCourse()
    {
        using var context = DbFactory.CreateDbContext();
        context.Course.Remove(course!);
        await context.SaveChangesAsync();
        NavigationManager.NavigateTo("/courses");
    }
}
