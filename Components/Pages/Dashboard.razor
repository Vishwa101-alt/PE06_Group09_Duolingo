@page "/dashboard"
@rendermode InteractiveServer

@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage
@using Microsoft.EntityFrameworkCore
@using FSDProject.Domain

@inject IDbContextFactory<FSDProject.Data.FSDProjectContext> DbFactory
@inject ProtectedLocalStorage ProtectedLocalStorage
@inject IJSRuntime JSRuntime
@inject NavigationManager NavigationManager

@if (isAuthenticated)
{
	<div style="width: 100%; margin-top: 100px; display: flex; flex-direction: column; justify-content: center; align-items: center;">
		<img src="/owl-reading-book.png" alt="Owl Reading Book Image" width="350" height="350" />
		@if (username is not null)
		{
			<label style="font-weight: bold; font-size: 20px; margin-top: 32px;">Welcome, @username!</label>
		}
	</div>
}


@code {
	private bool isAuthenticated = false;
	private string? username;

	protected override async Task OnAfterRenderAsync(bool firstRender)
	{
		try
		{
			if (firstRender)
			{
				var result = await ProtectedLocalStorage.GetAsync<int>("user-id");
				int UserID = result.Success ? result.Value : 0;
				if (UserID > 0)
				{
					using var context = DbFactory.CreateDbContext();
					UserAcc?  userAcc = await context.UserAcc.FirstOrDefaultAsync(m => m.UserAccId == UserID);
					if (userAcc is not null)
					{
						isAuthenticated = true;
						username = userAcc.Username;
						StateHasChanged();
					}
					else {
						await ProtectedLocalStorage.DeleteAsync("user-id");
						await JSRuntime.InvokeAsync<Task>("alert", "Unauthorized Access!");
						NavigationManager.NavigateTo("/signin");
					}
				}
				else
				{
					await ProtectedLocalStorage.DeleteAsync("user-id");
					await JSRuntime.InvokeAsync<Task>("alert", "Unauthorized Access!");
					NavigationManager.NavigateTo("/signin");
				}
			}
		}
		catch (Exception ex)
		{
			Console.WriteLine($"Unexpected error: {ex.Message}");
			await ProtectedLocalStorage.DeleteAsync("user-id");
			await JSRuntime.InvokeAsync<Task>("alert", "Unauthorized Access!");
			NavigationManager.NavigateTo("/signin");
		}
	}
}