@page "/scores/delete"
@using Microsoft.EntityFrameworkCore
@using FSDProject.Domain
@inject IDbContextFactory<FSDProject.Data.FSDProjectContext> DbFactory
@inject NavigationManager NavigationManager

<PageTitle>Delete</PageTitle>

<h1>Delete</h1>

<p>Are you sure you want to delete this?</p>
<div>
    <h2>Score</h2>
    <hr />
    @if (score is null)
    {
        <p><em>Loading...</em></p>
    }
    else {
        <dl class="row">
            <dt class="col-sm-2">PointsAwarded</dt>
            <dd class="col-sm-10">@score.PointsAwarded</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">StoreId</dt>
            <dd class="col-sm-10">@score.StoreId</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">UserProfileId</dt>
            <dd class="col-sm-10">@score.UserProfileId</dd>
        </dl>
        <EditForm method="post" Model="score" OnValidSubmit="DeleteScore" FormName="delete" Enhance>
            <button type="submit" class="btn btn-danger" disabled="@(score is null)">Delete</button> |
            <a href="/scores">Back to List</a>
        </EditForm>
    }
</div>

@code {
    private Score? score;

    [SupplyParameterFromQuery]
    private int ScoreId { get; set; }

    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();
        score = await context.Score.FirstOrDefaultAsync(m => m.ScoreId == ScoreId);

        if (score is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }

    private async Task DeleteScore()
    {
        using var context = DbFactory.CreateDbContext();
        context.Score.Remove(score!);
        await context.SaveChangesAsync();
        NavigationManager.NavigateTo("/scores");
    }
}
