@page "/aboutus"

@using Microsoft.EntityFrameworkCore
@using FSDProject.Domain
@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage

@inject ProtectedLocalStorage ProtectedLocalStorage
@inject IJSRuntime JSRuntime
@inject IDbContextFactory<FSDProject.Data.FSDProjectContext> DbFactory
@inject NavigationManager NavigationManager
<div class="about-us-container">
    <h1>About Us</h1>
    <div class="mission-section">
        <h2>Personalized education.</h2>
        <p>
            Everyone learns in different ways. For the first time in history, we can analyze how millions of people learn at once to create the most effective educational system possible and tailor it to each student.
        </p>
        <p>
            Our ultimate goal is to give everyone access to a private tutor experience through technology.
        </p>
    </div>

    <div class="approach-section">
        <h2>Making learning fun.</h2>
        <p>
            It’s hard to stay motivated when learning online, so we made Duolingo so fun that people would prefer picking up new skills over playing a game.
        </p>
    </div>

    <div class="team-section">
        <h2>Universally accessible.</h2>
        <p>
            There are over 1.2 billion people learning a language and the majority are doing so to gain access to better opportunities. Unfortunately, learning a language is expensive and inaccessible to most.
        </p>
        <p>
            We created Duolingo so that everyone could have a chance. Free language education – no hidden fees, no premium content, just free.
        </p>
        <p>
            Duolingo is used by the richest man in the world and many Hollywood stars, and at the same time by public schools students in developing countries. We believe true equality is when spending more can’t buy you a better education.
        </p>
    </div>

    <div class="feedback-section">
        <h2>Feedback</h2>
        <ul>
            <li>
                <strong>Robert:</strong> "Wow my son has learnt so much from taking up a course in you app , Now he can verbally converse with people all over the world !".
            </li>
            <li>
                <strong>Juliet:</strong> "Thanks to your courses , i was able to speak fluently and apply what i have learn with my friends!!".
            </li>
        </ul>
    </div>
</div>

<style>
    .about-us-container {
        max-width: 800px;
        margin: 0 auto;
        padding: 20px;
        font-family: Arial, sans-serif;
    }

    h1 {
        text-align: center;
        color: #2c3e50;
    }

    h2 {
        color: #34495e;
        margin-top: 20px;
    }

    p {
        line-height: 1.6;
        color: #7f8c8d;
    }

    .mission-section, .approach-section, .team-section, .feedback-section {
        margin-bottom: 40px;
    }

    .feedback-section ul {
        list-style-type: none;
        padding: 0;
    }

    .feedback-section ul li {
        background: #ecf0f1;
        margin: 10px 0;
        padding: 10px;
        border-radius: 5px;
    }

    .feedback-section ul li strong {
        color: #2c3e50;
    }
</style>

@code {
    private bool isAuthenticated = false;
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        try
        {
            if (firstRender)
            {
                var result = await ProtectedLocalStorage.GetAsync<int>("user-id");
                int UserID = result.Success ? result.Value : 0;
                if (UserID > 0)
                {
                    using var context = DbFactory.CreateDbContext();
                    UserAcc? userAcc = await context.UserAcc.FirstOrDefaultAsync(m => m.UserAccId == UserID);
                    if (userAcc is not null)
                    {
                        isAuthenticated = true;
                        StateHasChanged();
                    }
                    else
                    {
                        await ProtectedLocalStorage.DeleteAsync("user-id");
                        await JSRuntime.InvokeAsync<Task>("alert", "Unauthorized Access!");
                        NavigationManager.NavigateTo("/signin");
                    }
                }
                else
                {
                    await ProtectedLocalStorage.DeleteAsync("user-id");
                    await JSRuntime.InvokeAsync<Task>("alert", "Unauthorized Access!");
                    NavigationManager.NavigateTo("/signin");
                }
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Unexpected error: {ex.Message}");
            await ProtectedLocalStorage.DeleteAsync("user-id");
            await JSRuntime.InvokeAsync<Task>("alert", "Unauthorized Access!");
            NavigationManager.NavigateTo("/signin");
        }
    }
}