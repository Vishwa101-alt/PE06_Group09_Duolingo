@page "/profile"

@using Microsoft.EntityFrameworkCore
@using FSDProject.Domain
@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage

@inject ProtectedLocalStorage ProtectedLocalStorage
@inject IJSRuntime JSRuntime
@inject IDbContextFactory<FSDProject.Data.FSDProjectContext> DbFactory
@inject NavigationManager NavigationManager

<h3>Profile</h3>

@if (userProfile != null && userAcc != null)
{
    <div class="profile-wrapper">
        <h4>Hello, @userAcc.Username!</h4>
        <p>Current Points: <strong>@userProfile.CurrentPoints</strong></p>

        <h5>Current Enrollment:</h5>
        @if (!string.IsNullOrEmpty(currentEnrolledCourse))
        {
            <p>You are currently enrolled in: <strong>@currentEnrolledCourse</strong></p>
        }
        else
        {
            <p>No active course enrollment.</p>
        }

        <h5>Course Progress:</h5>
        <ul>
            @foreach (var courseStatus in courseStatuses)
            {
                <li>
                    <strong>@courseStatus.CourseName:</strong> @courseStatus.CompletionPercentage% completed
                </li>
            }
        </ul>
    </div>
}
else
{
    <p>Loading profile...</p>
}

@code {
    private UserProfile? userProfile;
    private UserAcc? userAcc;
    private List<CourseStatus> courseStatuses = new();
    private int UserID;
    private string? currentEnrolledCourse;

    protected override async Task OnInitializedAsync()
    {
        await LoadUserProfile();
    }

    private async Task LoadUserProfile()
    {
        try
        {
            var result = await ProtectedLocalStorage.GetAsync<int>("user-id");
            UserID = result.Success ? result.Value : 0;

            if (UserID > 0)
            {
                using var context = DbFactory.CreateDbContext();
                userAcc = await context.UserAcc.Include(u => u.Courses)
                                               .FirstOrDefaultAsync(u => u.UserAccId == UserID);

                if (userAcc != null)
                {
                    userProfile = await context.UserProfile.FirstOrDefaultAsync(up => up.UserProfileId == userAcc.UserProfileId);

                    if (userAcc.Courses?.Any() == true)
                    {
                        courseStatuses = userAcc.Courses.Select(c => new CourseStatus
                            {
                                CourseName = c.CourseName,
                                CompletionPercentage = c.CompletionPercentage ?? 0
                            }).ToList();

                        UpdateCurrentEnrollment();
                    }
                }
                else
                {
                    await LogoutUser();
                }
            }
            else
            {
                await LogoutUser();
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Unexpected error: {ex.Message}");
            await LogoutUser();
        }
    }

    private void UpdateCurrentEnrollment()
    {
        currentEnrolledCourse = courseStatuses.FirstOrDefault(cs => cs.CompletionPercentage < 100)?.CourseName;
    }

    private async Task LogoutUser()
    {
        await ProtectedLocalStorage.DeleteAsync("user-id");
        await JSRuntime.InvokeAsync<Task>("alert", "Unauthorized Access!");
        NavigationManager.NavigateTo("/signin");
    }

    private class CourseStatus
    {
        public string CourseName { get; set; } = string.Empty;
        public int CompletionPercentage { get; set; }
    }
}
