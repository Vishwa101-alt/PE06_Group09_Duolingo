@page "/languages"

@using Microsoft.EntityFrameworkCore
@using FSDProject.Domain
@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage

@inject ProtectedLocalStorage ProtectedLocalStorage
@inject IJSRuntime JSRuntime
@inject IDbContextFactory<FSDProject.Data.FSDProjectContext> DbFactory
@inject NavigationManager NavigationManager

@if (isAuthenticated)
{
    <div class="languages-wrapper">
        <label style="font-size: 14px; align-self: end; margin-right: 20px; color: grey;">Current Point: @currentPoint</label>
        <h1>Language Courses</h1>
        <div class="languages">
            @foreach (var course in courses)
            {
                <div class="language-item">
                    <h3>@course.CourseName</h3>
                    <label>Duration: @course.CourseDuration</label>
                    <label>Price: @course.CoursePrice</label>

                    @if (enrolledCourses.ContainsKey(course.CourseId))
                    {
                        <button @onclick="() => ContinueCourse(course)">Continue</button>
                        <button class="quit-btn" @onclick="() => QuitCourse(course)">Quit</button>
                        <p>Progress: @enrolledCourses[course.CourseId]%</p>
                    }
                    else
                    {
                        <button @onclick="() => EnrollInCourse(course)">Enroll</button>
                    }
                </div>
            }
        </div>
    </div>
}

@if (showEnrollPopup)
{
    <div class="modal-overlay">
        <div class="modal-wrapper">
            <h3>Confirm Enrollment</h3>
            <p>Are you sure you want to enroll in <strong>@selectedCourse?.CourseName</strong>?</p>
            <div class="modal-buttons">
                <button class="confirm-btn" @onclick="ConfirmEnrollment">Yes, Enroll</button>
                <button class="cancel-btn" @onclick="CloseEnrollPopup">Cancel</button>
            </div>
        </div>
    </div>
}

@code {
    private List<Course> courses = new();
    private Dictionary<int, int> enrolledCourses = new(); // CourseId -> CompletionPercentage
    private int UserID = 0;
    private bool isAuthenticated = false;
    private int currentPoint = 0;
    private bool showEnrollPopup = false;
    private Course? selectedCourse;

    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();
        courses = await context.Course.ToListAsync();
        await LoadUserData();
    }

    private async Task LoadUserData()
    {
        try
        {
            var result = await ProtectedLocalStorage.GetAsync<int>("user-id");
            UserID = result.Success ? result.Value : 0;

            if (UserID > 0)
            {
                using var context = DbFactory.CreateDbContext();
                var userAcc = await context.UserAcc.Include(u => u.Courses)
                                                   .FirstOrDefaultAsync(u => u.UserAccId == UserID);
                if (userAcc != null)
                {
                    isAuthenticated = true;
                    var userProfile = await context.UserProfile.FirstOrDefaultAsync(m => m.UserProfileId == userAcc.UserProfileId);
                    if (userProfile is not null)
                    {
                        currentPoint = userProfile.CurrentPoints ?? 0;
                        enrolledCourses = userAcc.Courses.ToDictionary(c => c.CourseId, c => c.CompletionPercentage ?? 0);
                    }
                }
                else
                {
                    await LogoutUser();
                }
            }
            else
            {
                await LogoutUser();
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Unexpected error: {ex.Message}");
            await LogoutUser();
        }
    }

    private void EnrollInCourse(Course course)
    {
        selectedCourse = course;
        showEnrollPopup = true;
        StateHasChanged();
    }

    private void CloseEnrollPopup()
    {
        showEnrollPopup = false;
        StateHasChanged();
    }

    private async Task ConfirmEnrollment()
    {
        if (selectedCourse is not null)
        {
            using var context = DbFactory.CreateDbContext();
            var userAcc = await context.UserAcc.Include(u => u.Courses).FirstOrDefaultAsync(u => u.UserAccId == UserID);
            if (userAcc is not null && !enrolledCourses.ContainsKey(selectedCourse.CourseId))
            {
                userAcc.Courses.Add(selectedCourse);
                await context.SaveChangesAsync();
                enrolledCourses[selectedCourse.CourseId] = 0;
                await JSRuntime.InvokeAsync<Task>("alert", "Enrollment successful!");
            }
        }
        showEnrollPopup = false;
        StateHasChanged();
    }

    private async Task ContinueCourse(Course course)
    {
        if (enrolledCourses.TryGetValue(course.CourseId, out int completionPercentage) && completionPercentage < 100)
        {
            NavigationManager.NavigateTo($"/{course.CourseName.ToLower().Replace(" ", "")}questionnaire");
        }
        else if (completionPercentage >= 100)
        {
            await JSRuntime.InvokeVoidAsync("alert", "You have already completed this course.");
        }
    }
    private async Task LogoutUser()
    {
        await ProtectedLocalStorage.DeleteAsync("user-id");
        await JSRuntime.InvokeAsync<Task>("alert", "Unauthorized Access!");
        NavigationManager.NavigateTo("/signin");
    }
    private async Task QuitCourse(Course course)
    {
        bool confirmQuit = await JSRuntime.InvokeAsync<bool>("confirm", $"Are you sure you want to quit {course.CourseName}? Your progress will be lost.");

        if (confirmQuit)
        {
            using var context = DbFactory.CreateDbContext();
            var userAcc = await context.UserAcc.Include(u => u.Courses)
                                               .FirstOrDefaultAsync(u => u.UserAccId == UserID);
            if (userAcc is not null)
            {
                var courseToRemove = userAcc.Courses.FirstOrDefault(c => c.CourseId == course.CourseId);
                if (courseToRemove is not null)
                {
                    userAcc.Courses.Remove(courseToRemove);
                    await context.SaveChangesAsync();
                    enrolledCourses.Remove(course.CourseId);
                    await JSRuntime.InvokeAsync<Task>("alert", "You have quit the course.");
                    StateHasChanged();
                }
            }
        }
    }


    public async Task UpdateCourseProgress(int courseId)
    {
        using var context = DbFactory.CreateDbContext();
        var userAcc = await context.UserAcc.Include(u => u.Courses)
                                           .FirstOrDefaultAsync(u => u.UserAccId == UserID);
        if (userAcc is not null)
        {
            var course = userAcc.Courses.FirstOrDefault(c => c.CourseId == courseId);
            if (course is not null)
            {
                course.CompletionPercentage = 100; // Set to 100% upon questionnaire completion
                enrolledCourses[courseId] = course.CompletionPercentage.Value;
                await context.SaveChangesAsync();
            }
        }
        StateHasChanged();
    }
}
