@page "/signin"
@layout PublicLayout
@rendermode InteractiveServer

@using FSDProject.Components.Layout
@using System.ComponentModel.DataAnnotations
@using FSDProject.Domain
@using Microsoft.EntityFrameworkCore
@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage

@inject IDbContextFactory<FSDProject.Data.FSDProjectContext> DbFactory
@inject NavigationManager NavigationManager
@inject ProtectedLocalStorage ProtectedLocalStorage

<div class="sign-in">
	@if (errorMessage is not null)
	{
		<label class="error-message">@errorMessage</label>
	}
	<EditForm method="post" Model="signInModel" FormName="SignInForm" OnValidSubmit="HandleSubmit" Enhance>
		<DataAnnotationsValidator />
		<h2>Welcome back</h2>

		<div class="form-item">
			<label for="email">Email</label>
			<InputText id="email" class="form-control" @bind-Value="signInModel.Email" />
			<ValidationMessage style="margin-top: 2px; font-size: 13px;" For="@(() => signInModel.Email)" />
		</div>

		<div class="form-item">
			<label for="password">Password</label>
			<InputText id="password" type="password" class="form-control" @bind-Value="signInModel.Password" />
			<ValidationMessage style="margin-top: 2px; font-size: 13px;" For="@(() => signInModel.Password)" />
		</div>

		<div class="button-div">
			<button type="submit" disabled="@isSubmitting">
				@if (isSubmitting)
				{
					<div class="spinner-border" style="width: 1rem; height: 1rem;" role="status">
					</div>
				}
				else
				{
					<span>Sign In</span>
				}
			</button>
		</div>
	</EditForm>
</div>

@code {
	private bool isSubmitting = false;
	private string? errorMessage;
	private UserAcc? useracc;

	[SupplyParameterFromForm]
	private SignInModel signInModel { get; set; } = new();

	private async Task HandleSubmit()
	{
		isSubmitting = true;
		using var context = DbFactory.CreateDbContext();
		useracc = await context.UserAcc.FirstOrDefaultAsync(m => m.Email == signInModel.Email && m.Password == signInModel.Password);
		if (useracc is not null)
		{
			await ProtectedLocalStorage.SetAsync("user-id", useracc.UserAccId);
			NavigationManager.NavigateTo("dashboard");
		}
		else
		{
			errorMessage = "Invalid email or password";
		}
		isSubmitting = false;
	}

	private class SignInModel
	{
		[Required(ErrorMessage = "Email is required.")]
		[EmailAddress(ErrorMessage = "Invalid email format.")]
		public string Email { get; set; } = string.Empty;

		[Required(ErrorMessage = "Password is required.")]
		public string Password { get; set; } = string.Empty;
	}
}
