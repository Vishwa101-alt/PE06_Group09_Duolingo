@page "/userprofiles/create"
@using Microsoft.EntityFrameworkCore
@using FSDProject.Domain
@inject IDbContextFactory<FSDProject.Data.FSDProjectContext> DbFactory
@inject NavigationManager NavigationManager

<PageTitle>Create</PageTitle>

<h1>Create</h1>

<h2>UserProfile</h2>
<hr />
<div class="row">
    <div class="col-md-4">
        <EditForm method="post" Model="UserProfile" OnValidSubmit="AddUserProfile" FormName="create" Enhance>
            <DataAnnotationsValidator />
            <ValidationSummary class="text-danger" role="alert"/>
            <div class="mb-3">
                <label for="status" class="form-label">Status:</label> 
                <InputText id="status" @bind-Value="UserProfile.Status" class="form-control" /> 
                <ValidationMessage For="() => UserProfile.Status" class="text-danger" /> 
            </div>        
            <div class="mb-3">
                <label for="currentpoints" class="form-label">CurrentPoints:</label> 
                <InputNumber id="currentpoints" @bind-Value="UserProfile.CurrentPoints" class="form-control" /> 
                <ValidationMessage For="() => UserProfile.CurrentPoints" class="text-danger" /> 
            </div>        
            <div class="mb-3">
                <label for="rewardid" class="form-label">RewardId:</label> 
                <InputNumber id="rewardid" @bind-Value="UserProfile.RewardId" class="form-control" /> 
                <ValidationMessage For="() => UserProfile.RewardId" class="text-danger" /> 
            </div>        
            <div class="mb-3">
                <label for="courseid" class="form-label">CourseId:</label> 
                <InputNumber id="courseid" @bind-Value="UserProfile.CourseId" class="form-control" /> 
                <ValidationMessage For="() => UserProfile.CourseId" class="text-danger" /> 
            </div>        
            <button type="submit" class="btn btn-primary">Create</button>
        </EditForm>
    </div>
</div>

<div>
    <a href="/userprofiles">Back to List</a>
</div>

@code {
    [SupplyParameterFromForm]
    private UserProfile UserProfile { get; set; } = new();

    // To protect from overposting attacks, see https://learn.microsoft.com/aspnet/core/blazor/forms/#mitigate-overposting-attacks.
    private async Task AddUserProfile()
    {
        using var context = DbFactory.CreateDbContext();
        context.UserProfile.Add(UserProfile);
        await context.SaveChangesAsync();
        NavigationManager.NavigateTo("/userprofiles");
    }
}
