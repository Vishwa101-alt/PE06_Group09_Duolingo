@page "/userprofiles/edit"
@using Microsoft.EntityFrameworkCore
@using FSDProject.Domain
@inject IDbContextFactory<FSDProject.Data.FSDProjectContext> DbFactory
@inject NavigationManager NavigationManager

<PageTitle>Edit</PageTitle>

<h1>Edit</h1>

<h2>UserProfile</h2>
<hr />
@if (UserProfile is null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="row">
        <div class="col-md-4">
            <EditForm method="post" Model="UserProfile" OnValidSubmit="UpdateUserProfile" FormName="edit" Enhance>
                <DataAnnotationsValidator />
                <ValidationSummary role="alert"/>
                <input type="hidden" name="UserProfile.UserProfileId" value="@UserProfile.UserProfileId" />
                <div class="mb-3">
                    <label for="status" class="form-label">Status:</label>
                    <InputText id="status" @bind-Value="UserProfile.Status" class="form-control" />
                    <ValidationMessage For="() => UserProfile.Status" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="currentpoints" class="form-label">CurrentPoints:</label>
                    <InputNumber id="currentpoints" @bind-Value="UserProfile.CurrentPoints" class="form-control" />
                    <ValidationMessage For="() => UserProfile.CurrentPoints" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="rewardid" class="form-label">RewardId:</label>
                    <InputNumber id="rewardid" @bind-Value="UserProfile.RewardId" class="form-control" />
                    <ValidationMessage For="() => UserProfile.RewardId" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="courseid" class="form-label">CourseId:</label>
                    <InputNumber id="courseid" @bind-Value="UserProfile.CourseId" class="form-control" />
                    <ValidationMessage For="() => UserProfile.CourseId" class="text-danger" />
                </div>
                <button type="submit" class="btn btn-primary">Save</button>
            </EditForm>
        </div>
    </div>
}

<div>
    <a href="/userprofiles">Back to List</a>
</div>

@code {
    [SupplyParameterFromQuery]
    private int UserProfileId { get; set; }

    [SupplyParameterFromForm]
    private UserProfile? UserProfile { get; set; }

    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();
        UserProfile ??= await context.UserProfile.FirstOrDefaultAsync(m => m.UserProfileId == UserProfileId);

        if (UserProfile is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }

    // To protect from overposting attacks, enable the specific properties you want to bind to.
    // For more information, see https://learn.microsoft.com/aspnet/core/blazor/forms/#mitigate-overposting-attacks.
    private async Task UpdateUserProfile()
    {
        using var context = DbFactory.CreateDbContext();
        context.Attach(UserProfile!).State = EntityState.Modified;

        try
        {
            await context.SaveChangesAsync();
        }
        catch (DbUpdateConcurrencyException)
        {
            if (!UserProfileExists(UserProfile!.UserProfileId))
            {
                NavigationManager.NavigateTo("notfound");
            }
            else
            {
                throw;
            }
        }

        NavigationManager.NavigateTo("/userprofiles");
    }

    private bool UserProfileExists(int userprofileid)
    {
        using var context = DbFactory.CreateDbContext();
        return context.UserProfile.Any(e => e.UserProfileId == userprofileid);
    }
}
